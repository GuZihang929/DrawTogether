// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: draw.proto

package rpc_draw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	GetGameUser(ctx context.Context, in *GameUserRequest, opts ...grpc.CallOption) (*GameUserResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	RepairContent(ctx context.Context, in *RepairContentRequest, opts ...grpc.CallOption) (*RepairContentResponse, error)
	GetOnlineUserList(ctx context.Context, in *GetOnlineUserListRequest, opts ...grpc.CallOption) (*GetOnlineUserListResponse, error)
	GetChatList(ctx context.Context, in *GetChatListRequest, opts ...grpc.CallOption) (*GetChatListResponse, error)
	AddWord(ctx context.Context, in *AddWordRequest, opts ...grpc.CallOption) (*AddWordResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) GetGameUser(ctx context.Context, in *GameUserRequest, opts ...grpc.CallOption) (*GameUserResponse, error) {
	out := new(GameUserResponse)
	err := c.cc.Invoke(ctx, "/draw.GameService/GetGameUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/draw.GameService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) RepairContent(ctx context.Context, in *RepairContentRequest, opts ...grpc.CallOption) (*RepairContentResponse, error) {
	out := new(RepairContentResponse)
	err := c.cc.Invoke(ctx, "/draw.GameService/RepairContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetOnlineUserList(ctx context.Context, in *GetOnlineUserListRequest, opts ...grpc.CallOption) (*GetOnlineUserListResponse, error) {
	out := new(GetOnlineUserListResponse)
	err := c.cc.Invoke(ctx, "/draw.GameService/GetOnlineUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetChatList(ctx context.Context, in *GetChatListRequest, opts ...grpc.CallOption) (*GetChatListResponse, error) {
	out := new(GetChatListResponse)
	err := c.cc.Invoke(ctx, "/draw.GameService/GetChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddWord(ctx context.Context, in *AddWordRequest, opts ...grpc.CallOption) (*AddWordResponse, error) {
	out := new(AddWordResponse)
	err := c.cc.Invoke(ctx, "/draw.GameService/AddWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	GetGameUser(context.Context, *GameUserRequest) (*GameUserResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	RepairContent(context.Context, *RepairContentRequest) (*RepairContentResponse, error)
	GetOnlineUserList(context.Context, *GetOnlineUserListRequest) (*GetOnlineUserListResponse, error)
	GetChatList(context.Context, *GetChatListRequest) (*GetChatListResponse, error)
	AddWord(context.Context, *AddWordRequest) (*AddWordResponse, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) GetGameUser(context.Context, *GameUserRequest) (*GameUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameUser not implemented")
}
func (UnimplementedGameServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedGameServiceServer) RepairContent(context.Context, *RepairContentRequest) (*RepairContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepairContent not implemented")
}
func (UnimplementedGameServiceServer) GetOnlineUserList(context.Context, *GetOnlineUserListRequest) (*GetOnlineUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineUserList not implemented")
}
func (UnimplementedGameServiceServer) GetChatList(context.Context, *GetChatListRequest) (*GetChatListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatList not implemented")
}
func (UnimplementedGameServiceServer) AddWord(context.Context, *AddWordRequest) (*AddWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWord not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_GetGameUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetGameUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draw.GameService/GetGameUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetGameUser(ctx, req.(*GameUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draw.GameService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_RepairContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).RepairContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draw.GameService/RepairContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).RepairContent(ctx, req.(*RepairContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetOnlineUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetOnlineUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draw.GameService/GetOnlineUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetOnlineUserList(ctx, req.(*GetOnlineUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draw.GameService/GetChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetChatList(ctx, req.(*GetChatListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draw.GameService/AddWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddWord(ctx, req.(*AddWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "draw.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameUser",
			Handler:    _GameService_GetGameUser_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _GameService_GetList_Handler,
		},
		{
			MethodName: "RepairContent",
			Handler:    _GameService_RepairContent_Handler,
		},
		{
			MethodName: "GetOnlineUserList",
			Handler:    _GameService_GetOnlineUserList_Handler,
		},
		{
			MethodName: "GetChatList",
			Handler:    _GameService_GetChatList_Handler,
		},
		{
			MethodName: "AddWord",
			Handler:    _GameService_AddWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draw.proto",
}
